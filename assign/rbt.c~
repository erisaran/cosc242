/**
   242 assignment rbt file.
   Code for building an rbt.
   @author Ben Dutton,  Alexander Dooley,  Murdoch Braid.
*/
 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "rbt.h"
#include "mylib.h"

#define IS_BLACK(x) ((NULL == (x)) || (BLACK == (x)->colour))
#define IS_RED(x) ((NULL != (x)) && (RED == (x)->colour))

/**
   @brief A red-black tree node struct.
   has fields for a key, a colour of either red or black, and left and right
   subtrees.
*/
struct rbt_node { /* should live in bst.c */
    char *key;
    rbt_colour colour;
    rbt left;
    rbt right;
};

/**
   @brief This function creates a new red-black tree.
   Assigns the root to NULL.
   @params Not used.
   @return NULL An empty red-black tree.
*/
rbt rbt_new() {
    return NULL;
}

/**
   @brief This function searches through a specified
   red-black tree for the specified string.
   @params b The red-black tree to be search through.
   @params key The string to be searched for.
   @return 0 If tree is empty or the string cannot be
   found.
   @return 1 If the string is found in the red-black tree.
*/
int rbt_search(rbt b, char *key) {
    if (b == NULL) {
        return 0;
    } else if (strcmp(key, b->key) == 0) {
        return 1;
    } else if (strcmp(key ,b->key) < 0) {
        return rbt_search(b->left, key);
    } else if (strcmp(key, b->key) > 0) {
        return rbt_search(b->right, key);
    }
    return 0;
}

/**
   @brief This function rotates the red-black tree to the
   right.
   @params b The red-black tree to be rotated.
   @return b The right rotated red-black tree.
*/
static rbt right_rotate(rbt b) {
    rbt temp = b;
    b = b->left;
    temp->left = b->right;
    b->right = temp;
    return b;
}

/**
   @brief This function rotates the red-black tree to the
   left.
   @params b The red-black tree to be rotated.
   @return b The left rotated red-black tree.
*/
static rbt left_rotate(rbt b) {
    rbt temp = b;
    b = b->right;
    temp->right = b->left;
    b->left = temp;
    return b;
}

/**
   @brief This function fixes the colouring of the
   red-black tree to adhere to the red-black tree
   specifications.
   @params b The red-black tree to be fixed.
   @return b The fixed red-black tree.
*/
static rbt rbt_fix(rbt b) {
    if (IS_RED(b->left) && IS_RED(b->left->left) ){
        if (IS_RED(b->right)) {
            b->colour = RED;
            b->left->colour = BLACK;
            b->right->colour = BLACK;
        } else if (IS_BLACK(b->right)) {
            b->colour = RED;
            b->left->colour = BLACK;
            b = right_rotate(b);
        }
    } else if (IS_RED(b->left) && IS_RED(b->left->right)) {
        if (IS_RED(b->right)) {
            b->colour = RED;
            b->left->colour = BLACK;
            b->right->colour = BLACK;
        } else if (IS_BLACK(b->right)) {
            b->colour = RED;
            b->left->right->colour = BLACK;
            b->left = left_rotate(b->left);
            b = right_rotate(b);
        }
    } else if (IS_RED(b->right) && IS_RED(b->right->left)) {
        if (IS_RED(b->left)) {
            b->colour = RED;
            b->left->colour = BLACK;
            b->right->colour = BLACK;
        }else if (IS_BLACK(b->left)) {
            b->right->left->colour = BLACK;
            b->colour = RED;
            b->right = right_rotate(b->right);
            b = left_rotate(b);
        }
    } else if (IS_RED(b->right) && IS_RED(b->right->right)) {
        if (IS_RED(b->left)) {
            b->colour = RED;
            b->left->colour = BLACK;
            b->right->colour = BLACK;
        } else if (IS_BLACK(b->left)) {
            b->right->colour = BLACK;
            b->colour = RED;
            b = left_rotate(b);
        }
    }
    return b;
}

/**
   @brief This function creates and allocates a new red-black subtree
   by recursively travelling down to a leaf.
   @params b The red-black tree which the string is
   inserted into.
   @params key The string to be inserted into the red-black tree
   @return b The created red-black tree.
*/
rbt rbt_insert(rbt b, char *key) {
    if (b == NULL) {
        b = emalloc(sizeof *b);
        b->key = emalloc((strlen(key)) + 1 * sizeof key[0]);
        strcpy(b->key, key);
        b->colour = RED;
    } else if (strcmp(key, b->key) <= 0) {
        b->left = rbt_insert(b->left, key);
    } else if (strcmp(key, b->key) > 0) {
        b->right = rbt_insert(b->right, key);
    }
    b = rbt_fix(b);
    return b;
}

/**
   @brief This function takes a red-black tree and prints
   out the contained strings in an inorder pattern.
   @params b The red-black tree to be printed out.
   @params f The inserted function to print the red-black
   tree.
   @return Not used.
*/
void rbt_inorder(rbt b, void f(char *s)) {
    if (b == NULL) {
        return;
    }
    rbt_inorder(b->left, f);
    f(b->key);
    rbt_inorder(b->right, f);
}

/**
   @brief This function takes a red-black tree and prints
   out the contained strings in an preorder pattern.
   @params b The red-black tree to be printed out.
   @params f The inserted function to print the red-black
   tree.
   @return Not used.
*/
void rbt_preorder(rbt b, void f(char *s, FILE *stream), FILE *stream) {
    if (b == NULL) {
        return;
    }
    f(b->key,stream);
    rbt_preorder(b->left, f, stream);
    rbt_preorder(b->right, f, stream);
}

/**
   @brief This function frees the memory associated with
   the specified red-black tree.
   @params b The red-black tree to be free.
   @return b The now free red-black tree.
*/
rbt rbt_free(rbt b) {
    if (b== NULL) {
        return b;
    }
    rbt_free(b->left);
    rbt_free(b->right);
    free(b->key);
    free(b);
    return b;
}

/**
   @brief This function deletes a specified string from
   a specified red-black tree,if the string exists.
   @params b The red-black tree to have the string removed
   from it.
   @params str The string to be deleted from the red-black tree
*/
rbt rbt_delete(rbt b,char *str) {
    rbt q;
    if (b == NULL) {
        return b;
    }
    if (strcmp(str, b->key) == 0) {
        if (b->left == NULL && b->right == NULL){
            free(b->key);
            free(b);
            b = NULL;
        } else if (b->left != NULL && b->right == NULL) {
            free(b->key);
            free(b);
            b = b->left;
            
        } else if (b->right != NULL && b->left == NULL) {
            free(b->key);
            free(b);
            b = b->right;
            
        } else if (b->right != NULL && b->left != NULL) {
            q = b->right;
            while (q->left != NULL) {
                q = q->left;
            }
            strcpy(b->key, q->key);
            b->right = rbt_delete(b->right, q->key);
        }
    } else if (strcmp(str, b->key) < 0 ){
        b->left = rbt_delete(b->left, str);
        return b;
    } else if (strcmp(str, b->key) > 0) {
        b->right = rbt_delete(b->right, str);
        return b;
    }
    return b;
}
/**
   @brief makes sure the root is black.
   @param b the rbt.
   @return the fixed tree.
*/
rbt root_fix(rbt b) {
    b->colour = BLACK;
    return b;
}
